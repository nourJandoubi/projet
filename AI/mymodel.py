# -*- coding: utf-8 -*-
"""myModel

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S_3lzl6cZGNI7R5V8dSAOkKMRqqs9osi
"""

import math
import pandas_datareade
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense,LSTM
import matplotlib.pyplot as plt
import yfinance as yf
plt.style.use('fivethirtyeight')

symbol = 'AAPL'
start_date = '2010-01-01'
end_date = '2019-12-31'

ticker = yf.Ticker(symbol)
df = ticker.history(start=start_date, end=end_date)

print(df.head(20))

df.shape

plt.figure(figsize=(16,8))
plt.title('cose price')
plt.plot(df['Close'])
plt.xlabel('Date')
plt.ylabel('close')
plt.show

#create a new datafrma with only close price
data=df.filter(['Close'])
#convert the dataframe to numpy array
dataset=data.values
trainin_data_len=math.ceil(len(dataset)*.8)

trainin_data_len

scaler=MinMaxScaler(feature_range=(0,1))
scaled_data=scaler.fit_transform(dataset)
scaled_data

train_data=scaled_data[0:trainin_data_len,:]

#split the data into x_train and y_train data sets
x_train=[]
y_train=[]
for i in range(60,len(train_data)):
  x_train.append(train_data[i-60:i,0])
  y_train.append(train_data[i,0])
  if i<=60:
    #x_train contain the 60past days 
   print(x_train)
   #y_train contains the 61 values that we wnt to predict 
   print(y_train)

#convert x_train and the y_train to numpy arrays 
x_train,y_train=np.array(x_train),np.array(y_train)

#reshape the data to be 3 dimensionel
x_train.shape
x_train=np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))
x_train.shape

#build the LSTM model
model=Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(x_train.shape[1],1)))
model.add(LSTM(50,return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

#compile the model 
model.compile(optimizer='adam',loss='mean_squared_error')

#train model 
model.fit(x_train,y_train,batch_size=1,epochs=1)

#create a testing data set 
#create a new array containing scaled values from index 1952->elbe9i
test_data=scaled_data[trainin_data_len-60:,:]
x_test=[]
y_test=dataset[trainin_data_len:,:]
for i in range(60,len(test_data)):
  x_test.append(test_data[i-60:i,0])

#convert the data to numpy
x_test=np.array(x_test)

#reshape the data
x_test=np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))

#get the model predicted price values
prediction=model.predict(x_test)
prediction=scaler.inverse_transform(prediction)

#get the mean squared error (RMSE)
rmse=np.sqrt(np.mean(prediction-y_test)**2)
rmse

#plot the data
train=data[:trainin_data_len]
valid=data[trainin_data_len:]
valid['prediction']=prediction
#visualize the model
plt.figure(figsize=(16,8))
plt.title('model')
plt.xlabel('date')
plt.ylabel('close price usd$')
plt.plot(train['Close'])
plt.plot(valid[['Close','prediction']])
plt.legend(['Train','Val','prediction'],loc='lower right')
plt.show()

valid